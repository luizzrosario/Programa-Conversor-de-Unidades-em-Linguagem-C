/*
    ¬∫C -> ¬∫F => F = (C * 1.8)+32 üëç
    ¬∫F -> ¬∫C => C = (F - 32)/1.8 üëç
    ¬∫C -> K  => K = C + 273.15 üëç
    K  -> ¬∫C => C = K - 273.15 üëç
    ¬∫F -> K  => K = ((F - 32)/1.8)+273.15 üëç
    K  -> ¬∫F => F = ((K - 273.15)*1.8)+32 üëç
*/
// Unidade de temperatura, Jacson Santos(respons√°vel pela clia√ß√£o desse c√≥digo).

#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void Conversor_Temperatura();
char *Resultado_conversao(int conversao, double a_converter);
double Celsius_para_Fahrenheit(double c);
double Fahrenheit_para_Celsius(double f);
double Celsius_para_Kelvin(double c);
double Kelvin_para_Celsius(double k);
double Fahrenheit_para_Kelvin(double f);
double Kelvin_para_Fahrenheit(double k);

char *conversoes[] = {"Celsius para Fahrenheit", "Fahrenheit para Celsius", "Celsius para Kelvin", "Kelvin para Celsius", "Fahrenheit para Kelvin", "Kelvin para Fahrenheit", "Celsius para Fahrenheit e Kelvin", "Fahrenheit para Celsius e Kelvin", "Kelvin para Celsius e  Fahrenheit"};

// Fun√ß√£o principal do conversor, basta chama-la na fun√ß√£o main (N√£o esque√ßa de adicionar 'system("chcp 65001");')
void Conversor_Temperatura()
{
    do
    {
        int conversao;
        double a_converter;

        printf("\nEscolha a convers√£o desejada.");
        // for respons√°vel por exibir as op√ß√µes para o √∫su√°rio
        for (size_t i = 0; i < sizeof(conversoes) / sizeof(conversoes[0]); i++)
        {
            printf("\n\t %d => %s", (i + 1), conversoes[i]);
        }
        printf("\n\t 0 => PARA SAIR");

        printf("\nDigite o n√∫mero correspondente: ");
        scanf("%d", &conversao);
        if (conversao == 0)
            break;
        printf("Digite o valor do grau a converter: ");
        scanf("%lf", &a_converter);

        char *resultado = Resultado_conversao(conversao, a_converter);
        printf("\n%s\n", resultado);
    } while (1);
    printf("\nVoc√™ saiu do Conversor de Temperatura!");
}

// fun√ß√£o respons√°vel por genciar a escolha do us√∫√°rio e tratamento de erros. retorna a mensagem com o resultado.
char *Resultado_conversao(int conversao, double a_converter)
{
    // Aloca mem√≥ria para a string
    char *texto_saida = malloc(210);
    if (!texto_saida)
    {
        texto_saida = "Erro ao alocar mem√≥ria, tente novamente";
        return texto_saida;
    }
    // Verifica se a op√ß√£o √© inv√°lida
    if (conversao < 1 || conversao > (int)(sizeof(conversoes) / sizeof(conversoes[0])))
    {
        texto_saida = "Op√ß√£o inv√°lida, tente novamente.";
        return texto_saida;
    }

    // Inicia a mensagem de retorno
    snprintf(texto_saida, 210, "A conversao de '%s' √© igual a: ", conversoes[conversao - 1]);
    char *pos_atual = texto_saida + strlen(texto_saida); // Aponta para a posi√ß√£o final dos caracteres j√° adicionados √† string;
    int restante = 210 - strlen(texto_saida);            // verifica os espa√ßos restande (que podem ser adicionado mais caracteres);

    // Realiza a convers√£o espec√≠fica
    switch (conversao)
    {
    case 1:
        snprintf(pos_atual, restante, "%.2f ¬∫F", Celsius_para_Fahrenheit(a_converter));
        break;
    case 2:
        snprintf(pos_atual, restante, "%.2f ¬∫C", Fahrenheit_para_Celsius(a_converter));
        break;
    case 3:
        snprintf(pos_atual, restante, "%.2f K", Celsius_para_Kelvin(a_converter));
        break;
    case 4:
        snprintf(pos_atual, restante, "%.2f ¬∫C", Kelvin_para_Celsius(a_converter));
        break;
    case 5:
        snprintf(pos_atual, restante, "%.2f K", Fahrenheit_para_Kelvin(a_converter));
        break;
    case 6:
        snprintf(pos_atual, restante, "%.2f ¬∫F", Kelvin_para_Fahrenheit(a_converter));
        break;
    case 7:
        snprintf(pos_atual, restante, "%.2f ¬∫F e %.2f K", Celsius_para_Fahrenheit(a_converter), Celsius_para_Kelvin(a_converter));
        break;
    case 8:
        snprintf(pos_atual, restante, "%.2f ¬∫C e %.2f K", Fahrenheit_para_Celsius(a_converter), Fahrenheit_para_Kelvin(a_converter));
        break;
    case 9:
        snprintf(pos_atual, restante, "%.2f ¬∫C e %.2f ¬∫F", Kelvin_para_Celsius(a_converter), Kelvin_para_Fahrenheit(a_converter));
        break;
    }
    // Retorna o ponteiro contendo a mensagem com resultado da convers√£o.
    return texto_saida;
}

/*Abaixo est√£o as fun√ß√µes respons√°veis por realizar os calculos de cada formula correpondente*/
double Celsius_para_Fahrenheit(double c)
{
    double f = (c * 1.8) + 32;
    return f;
}
double Fahrenheit_para_Celsius(double f)
{
    double c = (f - 32) / 1.8;
    return c;
}
double Celsius_para_Kelvin(double c)
{
    double k = c + 273.15;
    return k;
}
double Kelvin_para_Celsius(double k)
{
    double c = k - 273.15;
    return c;
}
double Fahrenheit_para_Kelvin(double f)
{
    double k = ((f - 32) / 1.8) + 273.15;
    return k;
}
double Kelvin_para_Fahrenheit(double k)
{
    double f = ((k - 273.15) * 1.8) + 32;
    return f;
}